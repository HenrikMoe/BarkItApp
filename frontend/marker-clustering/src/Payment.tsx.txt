import React, { useState } from 'react';

type PaymentProps = {
  title: string;
  price: number;
};

const Payment: React.FC<PaymentProps> = ({ title, price }) => {
  const [paymentMethod, setPaymentMethod] = useState<'applePay' | 'creditCard' | null>(null);

  const handleApplePay = () => {
    // Implement Apple Pay logic
    console.log('Processing payment with Apple Pay');
  };

  const handleCreditCard = async () => {
    // Implement Stripe Credit Card payment logic
    // You'll need to use the Stripe API and handle the transaction on your server
    // Here, we simulate a client-side token creation using the test public key
    try {
      const stripe = Stripe('your_stripe_public_key');
      const elements = stripe.elements();

      // Create an instance of the card Element.
      const card = elements.create('card');

      // Add an instance of the card Element into the `card-element` div.
      card.mount('#card-element');

      // Handle real-time validation errors from the card Element.
      card.addEventListener('change', (event) => {
        const displayError = document.getElementById('card-errors');
        if (displayError) {
          displayError.textContent = event.error ? event.error.message : '';
        }
      });

      // Handle form submission.
      const form = document.getElementById('payment-form');
      if (form) {
        form.addEventListener('submit', async (event) => {
          event.preventDefault();

          const { token, error } = await stripe.createToken(card);

          if (error) {
            // Inform the user if there was an error.
            const displayError = document.getElementById('card-errors');
            if (displayError) {
              displayError.textContent = error.message || '';
            }
          } else {
            // Send the token to your server for further processing.
            console.log('Token created:', token);
            // Implement your backend logic for charging the user using the token
          }
        });
      }
    } catch (error) {
      console.error('Error initializing Stripe:', error);
    }
  };

  return (
    <div>
      <h2>{title}</h2>
      <p>Price: ${price.toFixed(2)}</p>

      <div>
        <label>
          <input
            type="radio"
            name="paymentMethod"
            value="applePay"
            checked={paymentMethod === 'applePay'}
            onChange={() => setPaymentMethod('applePay')}
          />
          Apple Pay
        </label>
        <label>
          <input
            type="radio"
            name="paymentMethod"
            value="creditCard"
            checked={paymentMethod === 'creditCard'}
            onChange={() => setPaymentMethod('creditCard')}
          />
          Credit Card
        </label>
      </div>

      {paymentMethod === 'applePay' && (
        <button onClick={handleApplePay}>Pay with Apple Pay</button>
      )}

      {paymentMethod === 'creditCard' && (
        <div>
          <form id="payment-form">
            <div id="card-element">
              {/* A Stripe Element will be inserted here. */}
            </div>
            {/* Used to display form errors. */}
            <div id="card-errors" role="alert"></div>
            <button type="submit">Pay with Credit Card</button>
          </form>
        </div>
      )}
    </div>
  );
};

export default Payment;
